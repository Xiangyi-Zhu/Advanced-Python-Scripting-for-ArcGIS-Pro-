# 2.1 Intro
#Custom functions can be called from elsewhere in the same script or from another script.
#Functions are organized into modules, and modules can be organized into a Python package. 
#e.g. ArcPy is a collection of modules organized into a package. 
#Class can help us easier to group together variables and functions.

#2.2 Functions and modules
#Functions are blocks of code that perform a specific task.
#Python has lots of built-in functions, such as help(), int(), print(), and str().

#Most functions require one or more arguement (input for functions)
#The general syntax of a function is:
#<function>(<arguments>)
name = 'Paul'
print(name)
#Output: Paul
#<variable> = <value>
#<fuction>(<variable>)
#Output: <value>

#Can check built-in functions in Python at: https://docs.python.org/3/library/functions.html

#Additional functionality from other modules can be imported to extend its capatibilities. 
#Typically, a module consists of several specialized functions. 
#The general syntax for the import statement is:
#import <module>
#Once you import a module in a script, all functions in that module are available to use in that script.

#The following code generates a random number from 1 to 99 using 
#the randrange() function of the random module
import random
random_number = random.randrange(1, 100)
print(random_number)
#import <module>
#<variable> = <module>.<function>
#<fuction>(<variable>)
#Output: <value>

#os module is one of the most widely used modules, which includes several functions 
#related to the operating system
import os
os.listdir() #returns a list containing the names of the entries  
#os.mkdir() function creates a new folder in the current working directory, as follow
import os
os.mkdir('foldername')

#The general syntax to use a function from a module:
#import <module>
<mudule>.<function>(<arguments>)

#ArcPy is referred to as a package because it consists of serveral modules, functions, and classes.
import arcpy
arcpy.Exists() #determines whether a dataset exists and returns a Boolean value of True or False

import arcpy
print(arcpy.Exists('G:/Desktop/a.shp')) #return True / False, you need to print it out
#Output: False
#Even though arcpy is treated as a package, it can still use the <module>.<function>(<arguments>)

#data access module in arcpy (arcpy.da), which is used to describe data, perform editing tasks, 
#follow database workflows)
#da.Describe() function determines the type of dataset, as well as several properties of the dataset
#the folowing code determines the geometry shape type of a shapefile
import arcpy
desc = arcpy.da.Describe('C:/Data/streams.shp')
print(desc['shapeType'])

import arcpy
print(arcpy.da.Describe('G:/Desktop/ke_forests/ke_forests.shp')['shapeType'])

#The general syntax for using a function of an ArcPy module is:
#arcpy.<module>.<function>(<argument>)
#Describe() is a function of the arcpy.da module

#2.3 Creating functions
#Python functions are defined using the def keyword
#The syntax of the def statement is:
#def <functionname>(<argument>):
def printmessage():
    print('hello world')  
printmessage()
#"When the script runs, the line of code starting with def and the block of code that follows do not
#do anything, in other words, the function definition part is not executed.
#When the function is called (third line), it is executed.

#Create a list of the names of all the fields in a table or feature class
#There is no function in the ArcPy does that, ListFields() function allows you to create 
#a list of the fields in a table, you can use for loop to iterate over items in list and 
#get the names of each field.
import arcpy
arcpy.env.workspace = 'G:/Desktop/ke_forests'
fields = arcpy.ListFields('ke_forests.shp')#fields here is a list of objects
#could check if parameter here could be .csv file later
namelist = []
for field in fields:
    namelist.append(field.name)

print(namelist)

#Output: ['FID', 'Shape', 'FRID', 'FOREST']

#change the above code to a custom function
#A function can use more than one argument, and arguments can be made optional.
#The lack of hard coding is typical for custom functions because you want a function to be reusable 
#in other scripts
#hard-coded value of feature class is replaced by the argument of the function, as follow:
import arcpy
arcpy.env.workspace = 'G:/Desktop/ke_forests'

def listfieldnames(table):
    fields = arcpy.ListFields(table)
    namelist = []
    for field in fields:
        namelist.append(field.name)
    return namelist

fieldnames = listfieldnames('ke_forests.shp')
print(fieldnames)

#If the function is called before the function definition, the following error is returned:
#NameError: name 'listfieldnames' is not defined











