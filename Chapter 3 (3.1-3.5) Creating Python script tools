#3.1 Intro
#This chapter show how to turn a Python script into a script tool
#Script tools makes it easier to share scripts with others.

#3.2 Script tools VS Python toolbox
#3.2.1 Create a tool using script tool
#The language for this tool is mostly python, but other scripting languages that accept argument can also 
#be used.
#Tool properties and parameters are created manually using interface options of the ArcGIS Pro application.

#3.2.2 Create a tool using a Python toolbox
#The entire tool dialog box is written in Python, and saved as a .pyt file
#which is recognized as a Python toolbox in ArcGIS Pro.
#A single Python toolbox can contain multiple tools, all written in the same script file 

#3.3 Why create your own tools?
#Any model created and saved using ModelBuilder is a tool because it is in a toolbox (.tbx file) 
#or a geodatabase
#Python scripts can be run in two ways: 
#(1) a stand-alone script runs from operating system or from within a Python editor.
#(2) As a tool within ArcGIS Pro 

#3.4 Steps to creating a script tool
#(1) create .py file carries out the intended task
#(2) create a custom toolbox (.tbx file) where the script tool can be stored
#(3) add a script tool to a custom toolbox
#(4) configure tool properties and parameters
#(5) modify the script ao that it can receive the tool parameter
#create a new custom toolbox on the Project tab of Catalog pane in ArcGIS Pro
#This new custom toolbox can be created in Toolboxes (New Toolbox (.atbx) / New Legacy Toolbox (.tbx)
# / New Python Toolbox (.pyt)) or in a folder (New Toolbox (.atbx) / New Legacy Toolbox (.tbx)
# / New Python Toolbox (.pyt)) or in a geodatabase (Toolbox) (The toolbox inside a geodatabase, like other 
#geodatabase elements, does not have a file extension.

#There are three toolbox formats that can be created and used in a project:
#(1) ArcGIS toolbox (.atbx file) is stored on disk. This toolbox format stores tools, scripts, and models. 
#It provides better cross-release compatibility and persistence, improved performance and scalability, 
#and less possibility of file corruption due to binary storage, 
#as the new format is JSON-based with an open specification compared to the legacy toolbox format (.tbx) described below. You can create toolsets, add new model and script tools, change properties, and copy and paste tools from legacy toolboxes into the new toolbox format using the Catalog pane.
#(2) Legacy toolbox—This toolbox format is stored as a .tbx file on disk or within a database.
#(3) Python toolbox—This toolbox format is stored as a .pyt file on disk. 
#All properties of a Python toolbox and its tools are defined using Python code.

# A stand-alone toolbox can be located anywhere on your computer, not only in the same folder in which
#datasets and other files for a project, also can be in a seperate folder which is used for 
#storing toolbox only

#To create a script tool, right click a custom toolbox, New -> Script
#???????? "Write access to the toolbox is needed to add a new script tool. As a result, you cannot
#add tools to any of the system toolboxes in ArcGIS Pro." I think these words means you cannot add tools 
#to the Toolbox in Geoprocessing Pane, because there have no writing accessiblity in these tools.

#'Store tool with relative path' is checked by default
#When this option is checked, relative paths are used instead of absolute paths to reference the location of the
#script file in relation to the location of the custom toolbox file.
#Typically, the python script and toolbox are in the same folder, and working with relative paths ensures the python
#script can still be located if the folder is moved or renamed.
#If you are going to share the tool with others, make sure the option is checked.

#3.5 Exploring tool parameters
#creating and exposing parameters requires the following steps
#(1) Including code in the script to receive the parameter values
#(2) Setting up the parameters in the script tool properties

#The tool parameters are received by the script using the arcpy.GetParameterAsText() and arcpy.GetParameter()
#



