#2.4 Calling functions from other scripts
#helloworld.py script
def printmessage():
    print('Hello world')
#print.py script
import helloworld #look for a file named helloworld.py
helloworld.printmessage()

#Where Python looks for module?
#The first place Python looks for helloworld module is the current folder in which the print.py script 
#is located. 
#The current folder can be obtained using the following code:
import sys
print(sys.path[0]) #sys.path() is a list of system path, 

#current folder also can be obtained using the os module:
import os
print(os.getcwd())

#print a complete list of paths:
import sys
for path in sys.path: #iteration makes the printout easier to read
	print(path)
#The first element of the list is the path of the current scripts
#The rest of the paths depend on how ArcGIS is installed on the environment being used.

#What if the module (script) you wanna import is in a different folder?
#(not in the current folder of the script or in any of the folder in sys.path)
#Option 1: Append the path using code
#Temporarily add a path to your script
import sys
sys.path.append('G:/thisistestfolder')
import helloworld
helloworld.printmessage()
#The sys.path.append() statement is a temporary solution so a script can call a function in another script

#Option 2: Use a path configuration(.pth) file
#This .pth file can be created using a basic text editor. 
#For more info, can check the textbook
#But for me, I prefer the option 1.

#Example used in the previous section: calculate the sinuosity:
#rivers.py
import math
def sinuosity(shape):
    channel = shape.length
    deltaX = shape.firstPoint.Xshape.lastPoint.X
    deltaY = shape.firstPoint.Yshape.lastPoint.Y
    valley = math.sqrt(pow(deltaX, 2) + pow(deltaY, 2))
    return channel / valley

#river_calculations.py
import arcpy
import river
arcpy.env.workspace = 'C:/Data/Hydro.gdb'
fc = 'streams'
with arcpy.da.SearchCursor (fc, ['OID@', 'SHAPE@']) as cursor:
    for row in cursor:
        oid = row[0]
        shape = row[1]
        si = round(rivers.sinuosity(shape), 3)
        print(f'Stream ID {oid} has a sinuosity index of {si}')
#When calling the custom function, the module must be included eg:rivers.sinuosity()

#2.5 Organizing code into modules
#All Python files are, in fact, modules.
#hello.py script
def printmessage():
    print('Hello world')
printmessage()
#foo.py script
import hello
#The output of foo.py is: Hello world
#How to distinguish between running the script by itself and importing it as a module into another script?

#This is where variable __name__comes in
#For any script, this variable has the value of "__main__"
#For an imported module, the variable is set to the name of the module
def printmessage():
    print('Hello world')
if __name__ == "__main__":
    printmessage()
#In this case, the test of code will run only if the script is run by itself.
#If you import the module into another script, no code will run until you call the function. 

