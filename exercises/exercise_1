#Exercise 1
#search terrain tools sample at https://www.arcgis.com/
#It is not required to write the script as a function, but writing it that way faciliates being able to reuse the code. 
#The following code is copied from textbook
# ---------------------------------------------------------------------------
# illumContours.py
# This technique is an implementation of the Tanaka method developed:
# by Patrick Kennelly and used with permission.
# Programmed by Linda Beale, Esri Inc
#
# Description:
# Tanaka referred to his technique as the relief contour method, although
# it is typically referred to as the illuminated contour or Tanaka method.
# ---------------------------------------------------------------------------

import os
import sys
import arcpy
from arcpy import env
from arcpy.sa import *

def illuminatedContours(inDEM, contourWidth, outFC, baseContour, zFactor):
    """
    illuminatedContours: calculates illuminated contours

    Required arguments:
    Inputs:
        inDEM -- Input DEM.
        contourWidth -- contour width.
        baseContour -- base contour value.
        zFactor -- z value.
    Outputs:
        outFC -- output Feature Class.
    """
    try:
        arcpy.env.overwriteOutput = True
        # Check out the Spatial Analyst license (use tools from the arcpy.sa module)
        arcpy.CheckOutExtension("Spatial")

        # Define the env workspace
        outPath = os.path.dirname(outFC)
        env.workspace = outPath

        # Inputs
        azimuth = 315
        altitude = 45

        # Outputs (Some of the outputs are created 'in memory', which means are not written to disk. )
        reclassPoly = arcpy.CreateFeatureclass_management("in_memory", "reclassPoly")
        outContours = arcpy.CreateFeatureclass_management(outPath, "outContours")

        # Process: Hillshade
        outHillshade = Hillshade(inDEM, azimuth, altitude, "NO_SHADOWS", zFactor)
        hillshadeCalc = (ACos(Float(outHillshade) / 255)) * 57.2958

        # Process: Reclassify
        remapRange = RemapRange([   [5.0758605003356934, 9.6565171082814523,1], [9.6565171082814523, 14.237173716227211,2],
                                    [14.237173716227211, 18.81783032417297,3], [18.81783032417297, 23.398486932118729,4],
                                    [23.398486932118729, 27.979143540064488,5], [27.979143540064488, 32.559800148010247,6],
                                    [32.559800148010247, 37.140456755956009,7], [37.140456755956009, 41.721113363901772,8],
                                    [41.721113363901772, 46.301769971847534,9], [46.301769971847534, 50.882426579793297,10],
                                    [50.882426579793297, 55.463083187739059,11], [55.463083187739059, 60.043739795684822,12],
                                    [60.043739795684822, 64.624396403630584,13], [64.624396403630584, 69.205053011576339,14],
                                    [69.205053011576339, 73.785709619522095,15], [73.785709619522095, 78.36636622746785,16],
                                    [78.36636622746785, 82.947022835413605,17], [82.947022835413605, 87.527679443359375,18]])
        outReclass = Reclassify(hillshadeCalc, "Value", remapRange)

        # Process: Create contours
        arcpy.RasterToPolygon_conversion(outReclass, reclassPoly, "SIMPLIFY", "VALUE")
        Contour(inDEM, outContours, contourWidth, baseContour, zFactor)
        inFeatures = [outContours, reclassPoly]
        arcpy.Intersect_analysis(inFeatures, outFC)

        # set the symbology (only works when the relative location of the toolbox and layerfile folder has not been altered)
        scriptPath = sys.path[0]
        one_folder_up = os.path.dirname(scriptPath)
        toolLayerPath = os.path.join(one_folder_up, "LayerFiles")
        lyrFile = os.path.join(toolLayerPath, "Illuminated Contours.lyr")

        params = arcpy.GetParameterInfo()
        params[2].symbology = lyrFile

        # Process: Delete temp features
        arcpy.DeleteFeatures_management(outContours)

    except arcpy.ExecuteError:
        arcpy.AddError(arcpy.GetMessages(2))
# End main function

#Parameters are created as tuple)
if __name__ == '__main__':
    args = tuple(arcpy.GetParameterAsText(i) for i in range(arcpy.GetArgumentCount()))
    illuminatedContours(*args)
