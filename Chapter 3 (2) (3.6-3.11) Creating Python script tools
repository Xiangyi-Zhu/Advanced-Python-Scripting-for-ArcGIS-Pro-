#3.6 Setting tool parameters
#Parameter Data Type: 
#(1)Feature Layer (on the tool dialog box, a user can use a drop-down list to select from the feature 
#layers in the current map but also can browse to a feature class on disk)
#(2)Feature Class (sounds similar to Feature Layer, but you can only use the feature classes on 
#disk and does not allow for the use of feature layers in the current map)
#(3)Long data type ensures that only integer values are entered, tool will not run if test 
#or decimal numbers are entered.
#(Optional) Multiple values option means you can enter multiple values of the same data type as a single
#parameter. These values are passed to a script as a list of values.
#(Optional) Table of vlaues (enter multiple values in a table format, tools like Intersect and Union use this 
#table of values format, also referred to as a value table.
#Parameters with multiple values are passed to the script as a string, with the individual element
#is seperated by ';', split method split the string into list:
#syntax:
#import arcpy
#input = arcpy.GetParamterAsText(0)
#input_list = input.split(';')
#Parameters with multiple values can also be handled using arcpy.GetParameter(), in this case, 
#result is a list of values, and individual values can be obtained using an index or by 
#iterating over the list.
#Parameters consist of a table of values, can use GetParameter() to obtain a ValueTable object,
#the values are stored in a virtual table of rows and columns. ValueTable is an ArcPy class that 
#is specifically designed for table of values.

#Three choices for Type: Required, Optional, and Derived 
#When setting the Type property to Optional, a default value for the parameter is specified 
#in the tool properties or in the script 
#Derived parameters are used for output parameters only and do not appear on the tool dialog box
#??????Derived parameters are used in several cases:
#(1) when a tool outputs a single value instead of a dataset. Such a single value is often 
#referred to as a scalar
#(2) when a tool creates outputs using information from other parameters
#(3) when a tool modifies an input without creating a new output
#????Sometimes the only way to ensure that a tool has an output is by using a derived parameter.
#Examples of tools with derived parameters include the Get Count and Add field tools. 

#Filter property: for long data type: None, Value List, Range (set the range of allowable values)
#Based on the different kinds of data types, there are various available filter types

#Category property allows you group different parameters into one group

#Dependency property: The dependency of one parameter on another parameter 

#Default property: allow you to specify the value of the parameter when the dialog box is open
#Default values are commonly used for Boolean parameters

#Environments property: another option to set default values, a drop-down list with env setting
#is provided
#When this property is set, the default value for the parameter is obtained from the environments
#of the geoprocessing framework

#???????Symbology property (cannot fully understand this property): 
#specify path to a layer file
#This explaination is copied and pasted directly from this book 
#"The symbology of a layer added in this way follows the regular rules for adding data to a map 
#in ArcGIS Pro - in other words, there is no customized symbology ??????
#"Setting the symbology property does not control whether the output ia added to an open map
#because this option is controlled by Geoprocessing Options.

#Editing tool code to receive parameters
#You can leave your script open in a Python editor during the testing of the script tool.
#Because when executing a script tool, the tool calls the associated script, and this call is
#independent from a Python editor.
#e.g.
#inputfc = arcpy.GetParameterAsText(0) #GetParameterAsText() returns the values as a string
#outputfc = arcpy.GetParameterAsText(1)
#outcount = arcpy.GetParameter(2) #GetParameter() returns the values as an object 
#???? I think string is also a object, so I think the didderence illustrated here is not clear
#enough (GetParameter returns strings, GetParameter returns objects.
#GetParameterAsText() function can be used for parameters that are not strings, but the value 
#must be cast to the appropriate type
#outcount = int(arcpy.GetParameterAsText(2))









